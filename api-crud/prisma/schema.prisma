datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma (full schema based on your SQL)

model Arrondissement {
  code              Int                   @id @default(autoincrement())
  code_departement  Int?
  code_region       Int?
  abbreviation      String?
  libelle           String?
  description       String?
  code_createur     String?
  code_modificateur String?
  date_creation     String?
  date_modification String?
  departement       Departement?          @relation(fields: [code_departement], references: [code])
  region            Region?               @relation(fields: [code_region], references: [code])
  bureauVotes       BureauVote[]
  pvArrondissements PvArrondissement[]
  utilisateurArrondissements UtilisateurArrondissement[]
}

model BureauVote {
  code              Int                   @id @default(autoincrement())
  designation       String?
  description       String?
  latitude          Float?
  longitude         Float?
  altitude          Float?
  data_filled       Int                   @default(0)
  code_arrondissement Int?
  code_createur     String?
  code_modificateur String?
  date_modification String?
  date_creation     String?
  data_incoherent   Int?
  effectif          BigInt?
  arrondissement    Arrondissement?       @relation(fields: [code_arrondissement], references: [code])
  redressementBureauVotes RedressementBureauVote[]
  redressementCandidats RedressementCandidat[]
  utilisateurBureauVotes UtilisateurBureauVote[]
}


model Candidat {
  code           Int      @id @default(autoincrement())
  nomsPrenoms    String?  @map("noms_prenoms")
  photo          String?
  dateCreation   String?  @map("date_creation")
  dateModification String? @map("date_modification")
  codeCreateur   String?  @map("code_createur")
  codeModificateur String? @map("code_modificateur")
  
  partisPolitiques PartiPolitique[]
  resultatsDepartement ResultatDepartement[]
  
  @@map("candidat")
}

model CommissionDepartementale {
  code              Int                   @id @default(autoincrement())
  code_departement  Int
  libelle           String?
  description       String?
  date_creation     DateTime              @default(now())
  date_modification DateTime              @default(now())
  departement       Departement           @relation(fields: [code_departement], references: [code])
  membreCommissions MembreCommission[]
}

model Departement {
  code              Int                   @id @default(autoincrement())
  abbreviation      String?
  chef_lieu         String?
  libelle           String?
  description       String?
  code_createur     String?
  code_modificateur String?
  date_creation     String?
  date_modification String?
  code_region       Int?
  region            Region?               @relation(fields: [code_region], references: [code])
  arrondissements   Arrondissement[]
  commissionDepartementales CommissionDepartementale[]
  participationDepartements ParticipationDepartement[]
  resultatDepartements ResultatDepartement[]
  utilisateurDepartements UtilisateurDepartement[]
}

model FonctionCommission {
  code              Int                   @id @default(autoincrement())
  libelle           String
  description       String?
  date_ajout        DateTime              @default(now())
  membreCommissions MembreCommission[]
}

model Journal {
  code              Int                   @id @default(autoincrement())
  code_utilisateur  String?
  action            String?
  description       String?
  timestamp         String?
  code_createur     String?
  code_modificateur String?
  date_creation     String?
  date_modification String?
}

model MembreCommission {
  code              Int                   @id @default(autoincrement())
  nom               String
  code_fonction     Int
  contact           String?
  email             String?
  date_ajout        DateTime              @default(now())
  est_membre_secretariat Boolean          @default(false)
  code_commission   Int?
  fonction          FonctionCommission    @relation(fields: [code_fonction], references: [code])
  commission        CommissionDepartementale? @relation(fields: [code_commission], references: [code])
}

model PartiPolitique {
  code              Int                   @id @default(autoincrement())
  designation       String?
  abbreviation      String?
  description       String?
  coloration_bulletin String?
  image             String?
  code_candidat     Int?
  code_createur     String?
  code_modificateur String?
  date_creation     String?
  date_modification String?
  candidat          Candidat?             @relation(fields: [code_candidat], references: [code])
  redressementCandidats RedressementCandidat[]
  resultatDepartements ResultatDepartement[]
  resultats      ResultatDepartement[]
}

model ParticipationDepartement {
  code           Int      @id @default(autoincrement())
  codeDepartement Int     @map("code_departement")
  
  // Champs principaux obligatoires
  nombreBureauVote Int?   @default(0) @map("nombre_bureau_vote")
  nombreInscrit  Int?     @default(0) @map("nombre_inscrit")
  nombreVotant   Int?     @default(0) @map("nombre_votant")
  nombreEnveloppeUrnes Int? @default(0) @map("nombre_enveloppe_urnes")
  bulletinNul    Int?     @default(0) @map("bulletin_nul")
  suffrageExprime Int?    @default(0) @map("suffrage_exprime")
  
  // Champs détaillés optionnels
  enveloppesContBulletinsDifferents Int? @default(0) @map("enveloppes_bulletins_differents")
  bulletinsAvecSignes Int? @default(0) @map("bulletins_avec_signes")
  bulletinsDansEnveloppesAvecSignes Int? @default(0) @map("bulletins_enveloppes_signes")
  enveloppesAutresQueElecam Int? @default(0) @map("enveloppes_autres_elecam")
  bulletinsAutresQueElecam Int? @default(0) @map("bulletins_autres_elecam")
  bulletinsSansEnveloppes Int? @default(0) @map("bulletins_sans_enveloppes")
  enveloppesVides Int? @default(0) @map("enveloppes_vides")
  
  
  // Métadonnées
  dateCreation   String?  @map("date_creation")
  dateModification String? @map("date_modification")
  
  departement    Departement @relation(fields: [codeDepartement], references: [code])
  
  @@unique([codeDepartement])
  @@map("Participation_departement")
}

model Permission {
  code              Int                   @id
  nom_permission    String?
  description       String?
  code_createur     Int?
  code_modificateur Int?
  date_modification String?
  date_creation     String?
  rolePermissions   RolePermission[]
}

model PvArrondissement {
  code              Int                   @id @default(autoincrement())
  code_arrondissement Int
  url_pv            String?
  hash_file         String?
  libelle           String?
  timestamp         DateTime              @default(now())
  arrondissement    Arrondissement        @relation(fields: [code_arrondissement], references: [code])
}

model RedressementBureauVote {
  code                            Int                   @id @default(autoincrement())
  code_bureau_vote                Int?                  @unique
  nombre_inscrit_initial          Int?
  nombre_inscrit_redresse         Int?
  nombre_votant_initial           Int?
  nombre_votant_redresse          Int?
  taux_participation_initial      Float?
  taux_participation_redresse     Float?
  bulletin_nul_initial            Int?
  bulletin_nul_redresse           Int?
  suffrage_exprime_valables_initial Int?
  suffrage_exprime_valables_redresse Int?
  erreurs_materielles_initiales   String?
  erreurs_materielles_initiales_redresse String?
  raison_redressement             String?
  date_redressement               DateTime              @default(now())
  bureauVote                      BureauVote?           @relation(fields: [code_bureau_vote], references: [code])
}

model RedressementCandidat {
  code              Int                   @id @default(autoincrement())
  code_bureau_vote  Int?
  code_parti        Int?
  nombre_vote_initial Int?
  nombre_vote_redresse Int?
  raison_redressement String?
  date_redressement DateTime              @default(now())
  bureauVote        BureauVote?           @relation(fields: [code_bureau_vote], references: [code])
  parti             PartiPolitique?       @relation(fields: [code_parti], references: [code])
}

model Region {
  code              Int                   @id @default(autoincrement())
  abbreviation      String?
  libelle           String?
  chef_lieu         String?
  description       String?
  code_createur     String?
  code_modificateur String?
  date_creation     String?
  date_modification String?
  arrondissements   Arrondissement[]
  departements      Departement[]
  utilisateurRegions UtilisateurRegion[]
}

model ResultatDepartement {
  code           Int      @id @default(autoincrement())
  codeDepartement Int     @map("code_departement")
  codeParti      Int      @map("code_parti")
  codeCandidat   Int?     @map("code_candidat")
  nombreVote     Int?     @default(0) @map("nombre_vote")
  pourcentage    Decimal? @db.Decimal(19, 4)
  dateCreation   String?  @map("date_creation")
  
  departement    Departement @relation(fields: [codeDepartement], references: [code])
  parti          PartiPolitique @relation(fields: [codeParti], references: [code])
  candidat       Candidat? @relation(fields: [codeCandidat], references: [code])
  
  @@unique([codeDepartement, codeParti])
  @@map("Resultat_departement")
}

model Role {
  code              Int                   @id @default(autoincrement())
  libelle           String?
  rolePermissions   RolePermission[]
  utilisateurs      Utilisateur[]
}

model RolePermission {
  code              Int                   @id @default(autoincrement())
  code_permission   Int?
  code_role         Int?
  permission        Permission?           @relation(fields: [code_permission], references: [code])
  role              Role?                 @relation(fields: [code_role], references: [code])
}

model Utilisateur {
  code              Int                   @id @default(autoincrement())
  noms_prenoms      String
  email             String
  password          String?
  last_login        String?
  boite_postale     String?
  adresse           String?
  contact           String?
  code_role         Int?
  code_createur     String?
  code_modificateur String?
  date_creation     String?
  date_modification String?
  username          String                @unique
  statut_vie        Int?
  role              Role?                 @relation(fields: [code_role], references: [code])
  utilisateurAffectationTerritoriales UtilisateurAffectationTerritoriale[]
  utilisateurAffectationTerritorialesAffectePar UtilisateurAffectationTerritoriale[] @relation("affecte_par")
  utilisateurArrondissements UtilisateurArrondissement[]
  utilisateurBureauVotes UtilisateurBureauVote[]
  utilisateurDepartements UtilisateurDepartement[]
  utilisateurRegions UtilisateurRegion[]
}

model UtilisateurAffectationTerritoriale {
  code              Int                   @id @default(autoincrement())
  code_utilisateur  Int
  type_territorial  String // Enum-like: 'region' | 'departement' | 'arrondissement'
  code_territorial  Int
  affecte_par       Int?
  date_affectation  DateTime              @default(now())
  date_modification DateTime              @default(now())
  est_actif         Boolean               @default(true)
  notes             String?
  utilisateur       Utilisateur           @relation(fields: [code_utilisateur], references: [code])
  affectePar        Utilisateur?          @relation("affecte_par", fields: [affecte_par], references: [code])
}

model UtilisateurArrondissement {
  code              Int                   @id @default(autoincrement())
  code_arrondissement Int?
  code_utilisateur  Int?
  arrondissement    Arrondissement?       @relation(fields: [code_arrondissement], references: [code])
  utilisateur       Utilisateur?          @relation(fields: [code_utilisateur], references: [code])
}

model UtilisateurBureauVote {
  code              Int                   @id @default(autoincrement())
  code_bureau_vote  Int?
  code_utilisateur  Int?
  bureauVote        BureauVote?           @relation(fields: [code_bureau_vote], references: [code])
  utilisateur       Utilisateur?          @relation(fields: [code_utilisateur], references: [code])
}

model UtilisateurDepartement {
  code              Int                   @id @default(autoincrement())
  code_departement  Int?
  code_utilisateur  Int?
  departement       Departement?          @relation(fields: [code_departement], references: [code])
  utilisateur       Utilisateur?          @relation(fields: [code_utilisateur], references: [code])
}

model UtilisateurRegion {
  code              Int                   @id @default(autoincrement())
  code_region       Int?
  code_utilisateur  Int?
  region            Region?               @relation(fields: [code_region], references: [code])
  utilisateur       Utilisateur?          @relation(fields: [code_utilisateur], references: [code])
}


model ParticipationCommune {
  code           Int      @id @default(autoincrement())
  codeCommune    Int      @map("code_commune")
  nombreBureaux  Int?     @map("nombre_bureaux")
  nombreInscrits Int?     @map("nombre_inscrits")
  nombreVotants  Int?     @map("nombre_votants")
  tauxParticipation Decimal? @map("taux_participation") @db.Decimal(5, 2)
  bulletinsNuls  Int?     @map("bulletins_nuls")
  suffragesValables Int?  @map("suffrages_valables")
  tauxAbstention Decimal? @map("taux_abstention") @db.Decimal(5, 2)
  dateCreation   DateTime @default(now()) @map("date_creation")
  dateModification DateTime @updatedAt @map("date_modification")
  
  commune        Arrondissement @relation(fields: [codeCommune], references: [code])
  
  @@map("participation_commune")
}